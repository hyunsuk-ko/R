scale_fill_discrete <- scale_colour_viridis_d
## reset default theme
theme_set(theme_minimal())
## Read in the data
## Specify the type
#mw = read_csv("madison-weather-2020.csv")
mw = read_csv("madison-weather-2020.csv",
col_types = cols(
STATION = col_character(),
NAME = col_character(),
LATITUDE = col_double(),
LONGITUDE = col_double(),
ELEVATION = col_double(),
DATE = col_date(format = ""),
AWND = col_double(),
PRCP = col_double(),
SNOW = col_double(),
SNWD = col_double(),
TAVG = col_double(),
TMAX = col_double(),
TMIN = col_double(),
WSF1 = col_double()
))
## Keep an original copy for below
mw_original = mw
## Show the dimensions
dim(mw)
## View the data; same as clicking on it in the Environment tab (upper right window)
View(mw)
## See what the complete list of names are:
mw %>% # take this data frame and then
select(NAME) %>% # grab the NAME variable and then
distinct()# show unique values
## ------------------ an aside on the value of the pipe %>% -----------
## non-pipe equivalent number 1
temp1 = select(mw,NAME)
temp2 = distinct(temp1)
temp2
rm(temp1,temp2)
## non-pipe equivalent number 2
## - read from the inside out
## - not too bad with only two functions
## - really hard to read with more complicated sets of instructions
distinct(select(mw,NAME))
## --------------------------------------------------------------------
## recode the NAME variable
## notice that names that do not follow the rules need to be bracketed with back ticks
## mutate() syntax:
##   mutate(.data, variable-name = value)
## usually called from a pipe, so we do not specify the data frame .data
##
## if variable-name exists, replaces the value with new value
## if the variable-name is not in the data frame, then create a new variable
## recode() syntax: use inside of mutate() or transmute()
## recode(variable-name, old-value-1 = "new-value-1", old-value-2 = "new-value-2", ...)
## See help (?recode) for more examples for other types of variables
## Notice that the old names do not have quotes
##   - they might have back ticks
## But the new names do have quotes
## Generally speaking, in tidyverse functions, you do not need quotes around names of variables in the data frame on which action is taking, but names not in this data frame need quotes
mw <- mw %>%
mutate(NAME = recode(NAME,
`UW ARBORETUM MADISON, WI US` = "Arboretum",
`CHARMANY FARM, WI US` = "Charmany",
`MADISON DANE CO REGIONAL AIRPORT, WI US` = "Airport",
`MADISON WEATHER BUREAU CITY, WI US` = "Bureau",
`MADISON MUNICIPAL AIRPORT, WI US`= "Municipal_Airport"))
## Select a few columns.
## Rename the variables with lower case letters
mw = mw %>%
select(NAME,DATE,PRCP,SNOW,TMAX,TMIN) %>%
rename(name = NAME,
date = DATE,
prcp = PRCP,
snow = SNOW,
tmax = TMAX,
tmin = TMIN)
## names() is a base R function to get/set the names of an object
## on a data frame, it returns the names of the variables
## These examples are meant to work with the original data set.
## Use mw_original which was created above after reading in the data
mw_original %>%
names()
## minus
mw_original %>%
select(-STATION) %>%
names()
## partial reorder using everything()
mw_original %>%
select(STATION,TMAX,TAVG,TMIN,everything()) %>%
names()
## examples with starts_with(), ends_with(), and contains()
mw_original %>%
select(NAME,starts_with("T")) %>%
names()
mw_original %>%
select(ends_with("E")) %>%
names()
mw_original %>%
select(contains("AT")) %>%
names()
## Find earliest and latest date
## Find number of dates in range
## Find number of missing observations in range
mw %>%
group_by(name) %>%
summarize(min = min(date), # earliest date by name
max = max(date), # most recent date by name
n = max - min + 1, # total number of days at named station
na = sum(date >= min & date <= max & is.na(tmax))) # number of days at the named station with no tmax measurements
## Decide to use all Airport data and only use Bureau data through 1939-09-30
## vertical bar `|` mean elementwise `OR'
## Note use of double equal signs == to check equality
#--> This is different from a single equal sign = used for assignment or labeling function arguments
## Keep rows where name is "Airport" or where the date is prior to October 1, 1939
## All of the early dates are at "Bureau"
mw = mw %>%
filter(name == "Airport" | (name == "Bureau" & date < "1939-10-01") )
## Double check
mw %>%
group_by(name) %>%
summarize(min = min(date),max=max(date))
## Check missing data
## Here is an example of defining a function in place
## and passing it as an argument to another function
mw %>%
summarize_all(function(x) sum(is.na(x)))
## Here is an alternative:
## define and create a function (see R4DS Chapter 19)
## Pass it to the summarize_all()
count_na = function(x)
{
return( sum(is.na(x)) )
}
mw %>%
summarize_all(count_na)
## To study temperature, drop snow and then drop missing data
## Later, we can add snow back in if we want to examine snowfall.
mw <- mw %>%
select(-snow) %>%
drop_na()
str(mw)
## Calculate average temperature and total precipitation by year
## Drop partial year of 2020
## Add a period for 30-year periods from 1869 through 2019
breaks = seq(1869,2019,30)
labels = str_c((breaks+1)[-6],breaks[-1],sep="-")
mw_year = mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
filter(year < 2020 & year > 1869) %>%
group_by(year) %>%
summarize(n = n(),
tmin = mean(tmin),
tavg = mean(tavg),
tmax = mean(tmax),
prcp = sum(prcp)) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels))
str(mw_year)
## Summarize by month and period
mw_month = mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(year = year(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
group_by(period,month) %>%
summarize(n=n(),
tmin = mean(tmin),
tmax = mean(tmax),
tavg = mean(tavg),
prcp = sum(prcp))
mw_month
mw_day <- mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
group_by(period,month,day) %>%
summarize(n=n(),tavg = mean(tavg))
mw_day
ggplot(mw_day, aes(x=day,y=tavg,color=period)) +
geom_line() +
facet_grid(~month)
mw_day %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tavg,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels))
mw2 <- mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
arrange(date)
mw2
mw2 %>%
group_by(month,period) %>%
summarize(tmax = mean(tmax),
tavg = mean(tavg),
tmin = mean(tmin))
mw2 %>%
group_by(month,period) %>%
summarize(tmax = mean(tmax),
tavg = mean(tavg),
tmin = mean(tmin)) %>%
pivot_wider(names_from=period,values_from=tmax)
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg))
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope)
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope) #%>% ## Preview of a tidyr command
ungroup() %>%
mutate(month_mean = round(rowMeans(select(.,c(2,3))),2))
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope) %>% ## Preview of a tidyr command
ungroup() %>%
mutate(month_mean = round(rowMeans(select(.,c(2,3))),2))
mw_day_extreme <- mw %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
group_by(period,month,day) %>%
summarize(n=n(), tmax = mean(tmax), tmin = mean(tmin))
mw_day_extreme <- mw %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
group_by(period,month,day) %>%
summarize(n=n(), tmax = mean(tmax), tmin = mean(tmin))
ggplot(mw_day, aes(x=day,y=tavg,color=period)) +
geom_line() +
facet_grid(~month)
mw_day %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tavg,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
## preliminary calculations to add variables to the daily data
## Much of this code was copied from above
## Create a second data frame mw2 which adds columns for tavg, year, month, day, and period
## and eliminates the partial 2020 year.
mw2 <- mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
arrange(date)
## answer the question
mw2 %>%
group_by(month,period) %>%
summarize(tmax = mean(tmax),
tavg = mean(tavg),
tmin = mean(tmin)) %>%
pivot_wider(names_from=period,values_from=tmax) ## This is a preview of an upcoming topic to reshape data
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope) %>% ## Preview of a tidyr command
ungroup() %>%
mutate(month_mean = round(rowMeans(select(.,c(2,3))),2))
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope) #%>% ## Preview of a tidyr command
#ungroup() %>%
#mutate(month_mean = round(rowMeans(select(.,c(2,3))),2))
mw_day_extreme <- mw %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
group_by(period,month,day) %>%
summarize(n=n(), tmax = mean(tmax), tmin = mean(tmin))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmax,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmax,color=period)) +
geom_line() +
#facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmax,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmin,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmin,color=period)) +
geom_line() +
facet_grid(~month) +
#scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_day_extreme %>%
filter(period == "1870-1899" | period == "1990-2019") %>%
ggplot(aes(x=day,y=tmin,color=period)) +
geom_line() +
facet_grid(~month) +
scale_x_continuous(limits = c(0, 31),
breaks = c(0, 15, 30))
mw_pr_4 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
summarize(n=n(),pmax = max(prcp),pmin = min(prcp))
mw_pr_4 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
summarize(n=n(),pmax = max(prcp),pmin = min(prcp))
### 4
mw_pr_4 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
summarize(n=n(),pmax = max(prcp),pmin = min(prcp))
mw2 <- mw %>%
mutate(tavg = (tmin+tmax)/2) %>%
mutate(year = year(date)) %>%
mutate(month = month(date, label=TRUE)) %>%
mutate(day = day(date)) %>%
filter(year < 2020 & year > 1869) %>%
mutate(period = cut(year,
breaks = breaks,
labels = labels)) %>%
arrange(date)
mw_pr_4 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
summarize(n=n(),pmax = max(prcp),pmin = min(prcp))
get_slope = function(x,y)
{
fit = lm(y ~ x)
return( (coef(fit))[2] )
}
mw2 %>%
group_by(month,period) %>%
summarize(slope = get_slope(day,tavg)) %>%
pivot_wider(names_from=period,values_from=slope) #%>% ## Preview of a tidyr command
#ungroup() %>%
#mutate(month_mean = round(rowMeans(select(.,c(2,3))),2))
mw_pr_4 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
summarize(n=n(),pmax = max(prcp),pmin = min(prcp))
ggplot(mw_pr_4) +
geom_segment(aes(x=day,xend=day,y=pmin,yend=pmax)) +
facet_wrap(~month,nrow=1) +
#facet_grid(.~month) + #rows ~ columns
xlab("Day of the Month") +
ylab("Precipitation (inches)") +
ggtitle("Madison Record Daily Precipitation") +
scale_x_continuous(breaks = c(0,30))
mw_pr_4
ggplot(mw_pr_4) +
geom_segment(aes(x=day,xend=day,y=pmin,yend=pmax)) +
facet_wrap(~month,nrow=1) +
#facet_grid(.~month) + #rows ~ columns
xlab("Day of the Month") +
ylab("Precipitation (inches)") +
ggtitle("Madison Record Daily Precipitation") +
scale_x_continuous(breaks = c(0,30))
ggplot(mw_pr_4) +
geom_segment(aes(x=day,xend=day,y=pmin,yend=pmax)) +
facet_wrap(~month,nrow=2) +
#facet_grid(.~month) + #rows ~ columns
xlab("Day of the Month") +
ylab("Precipitation (inches)") +
ggtitle("Madison Record Daily Precipitation") +
scale_x_continuous(breaks = c(0,30))
ggplot(mw_pr_4) +
geom_segment(aes(x=day,xend=day,y=pmin,yend=pmax)) +
#facet_wrap(~month,nrow=2) +
facet_grid(.~month) + #rows ~ columns
xlab("Day of the Month") +
ylab("Precipitation (inches)") +
ggtitle("Madison Record Daily Precipitation") +
scale_x_continuous(breaks = c(0,30))
?slice_max()
mw_pr_6 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
slice_max(prcp, n=1)
mw_pr_6
mw_pr_6 = mw2 %>%
select(date,period,year,month,day,prcp) %>%
drop_na() %>%
group_by(month,day) %>%
slice_max(prcp, n=1) %>% #?slice_max()
arrange(month,day)
mw_pr_6
mw_pr_7 = mw_pr_6 %>%
group_by(period,year) %>%
summarize(n=n())
mw_pr_7
ggplot(mw_pr_7, aes(x=year,y=n)) +
geom_point(aes(color=period))
ggplot(mw_pr_7, aes(x=year,y=n)) +
geom_point(aes(color=period)) +
geom_smooth(se=FALSE) +
ylab("Number of Record High Precipitation Events")
topone <- mw %>%
select(prcp) %>%
drop_na() %>%
filter(prcp > 0) %>%
summarize(q99 = quantile(prcp,prob=0.99))
topone
mw_pextreme <- mw2 %>%
select(period,date,year,month,day,prcp) %>%
drop_na() %>%
filter(prcp >= topone$q99) %>%
group_by(period) %>%
summarize(n=n())
mw_pextreme
ggplot(mw_pextreme, aes(x=period,y=n)) +
geom_col() +
xlab("30-year period") +
ylab("# of top 1% events") +
ggtitle("Distribution of Madison top 1% Precipitation Events",
subtitle="1870-2019")
