geom_smooth(method = "lm", se=FALSE, size = 2) +
geom_abline(slope = coef(fit_1)[[2]], intercept = coef(fit_1)[[1]], color="magenta")
chicago_1 <- chicago %>%
select(all_total,all_booths) %>%
drop_na()
chicago_1
chicago_1 <- chicago_1 %>%
summarize_all(list(
min = min,
mean = mean,
median = median,
max = max))
chicago_1
chicago_1 <- chicago_1%>%
pivot_longer(cols = everything(), names_to="stat",values_to = "value")
ggplot(chicago_1, aes(x=all_total,y=all_booths)) +
geom_point(alpha=0.1) +
geom_smooth(method = "lm")
chicago_1 <- chicago %>%
select(all_total,all_booths) %>%
drop_na()
chicago_1
chicago_1 <- chicago_1 %>%
summarize_all(list(
min = min,
mean = mean,
median = median,
max = max))
chicago_1
chicago_1 <- chicago_1 %>%
pivot_longer(cols = everything(), names_to="stat",values_to = "value")
ggplot(chicago_1, aes(x=all_total,y=all_booths)) +
geom_point(alpha=0.1) +
geom_smooth(method = "lm")
hicago_1 <- chicago %>%
select(all_total,all_booths) %>%
drop_na()
chicago_1 %>%
summarize_all(list(
min = min,
mean = mean,
median = median,
max = max)) %>%
pivot_longer(cols = everything(), names_to="stat",values_to = "value")
chicago_1 <- chicago %>%
select(all_total,all_booths) %>%
drop_na()
chicago_1 %>%
summarize_all(list(
min = min,
mean = mean,
median = median,
max = max)) %>%
pivot_longer(cols = everything(), names_to="stat",values_to = "value")
ggplot(chicago_1, aes(x=all_total,y=all_booths)) +
geom_point(alpha=0.1) +
geom_smooth(method = "lm")
fit_1 <- lm(all_booths ~ all_total, data=chicago_1)
summary(fit_1)
ggplot(chicago_1, aes(x=all_total,y=all_booths)) +
geom_point(alpha=0.1) +
geom_smooth(method = "lm", se=FALSE, size = 2) +
geom_abline(slope = coef(fit_1)[[2]], intercept = coef(fit_1)[[1]], color="magenta")
library(MASS)
corr_plot <- function(r,n){
data0 <- mvrnorm(n, mu = c(0,0),
Sigma = matrix(c(1,r,r,1),ncol = 2),
empirical = TRUE)
df <- tibble(x = data0[,1], y = data0[,2])
gg <- ggplot(df, aes(x=x,y=y)) +
geom_point() +
ggtitle(paste0("Correlation = ", round(cor(df$x,df$y),3)))
return(gg)
}
corr_plot(-.70,100)
corr_plot(-.20,100)
corr_plot(0,100)
corr_plot(.95,100)
detach("package:MASS")
## Generate our fake dataset
set.seed(246810)
n <- 100 ## sample size
a0 <- 1  ## intercept
a1 <- 2.5  ## slope
x <- runif(n, -3, 10)  ## explantory variable
y <- rnorm(n,a0+a1*x,3)  ## response variable
plot(x,y)
## Generate our fake dataset
set.seed(246810)
n <- 100 ## sample size
a0 <- 1  ## intercept
a1 <- 2.5  ## slope
x <- runif(n, -3, 10)  ## explantory variable
x
y <- rnorm(n,a0+a1*x,3)  ## response variable
y
plot(x,y)
## Estimate our slope and intercept
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
r
a1_hat <- r *sy/sx
a1_hat
a0_hat <- my - a1_hat*mx
a0_hat
df0 <- tibble(x=x, y=y)
lm0 <- lm(y~x, df0)
summary(lm0)
cf <- coef(lm0)
cf
library(modelr)
df0 <- df0 %>%
add_residuals(lm0) %>%
add_predictions(lm0)
ggplot(df0, aes(x=x, y =resid)) +
geom_point() +
xlab("x") +
ylab("Residuals") +
geom_hline(aes(yintercept=0), color="red", linetype = "dashed")
library(modelr)
df0 <- df0 %>%
add_residuals(lm0) %>%
add_predictions(lm0)
df0
ggplot(df0, aes(x=x, y =resid)) +
geom_point() +
xlab("x") +
ylab("Residuals") +
geom_hline(aes(yintercept=0), color="red", linetype = "dashed")
## Generate a different fake dataset that is not linear
set.seed(246810)
n <- 100 ## sample size
x1 <- runif(n, -3, 3)  ## explantory variable
y1 <- rnorm(n,0.5*x^2,5)  ## response variable
df1 <- tibble(x=x1, y=y1)
lm1 <- lm(y~x, df1)
df1 <- df1 %>%
add_residuals(lm1) %>%
add_predictions(lm1)
ggplot(df1, aes(x=x, y=resid)) +
geom_point() +
xlab("x") +
ylab("Residuals") +
geom_hline(aes(yintercept=0), color="red", linetype = "dashed")
detach("package:modelr")
aces <- read_csv("../../data/aces.csv")
assists <- read_csv("../../data/assists.csv")
blocks <- read_csv("../../data/blocks.csv")
digs <- read_csv("../../data/digs.csv")
hitting <- read_csv("../../data/hitting.csv")
kills <- read_csv("../../data/kills.csv")
opponents <- read_csv("../../data/opponent-hitting.csv")
wl <- read_csv("../../data/win-loss.csv")
## Remove redundant columns
remove_redundant <- function(x){
x <- x %>%
select(-Rank,-`W-L`,-`Per Set`) %>%
arrange(Team)
return ( x )
}
aces <- remove_redundant(aces)
assists <- remove_redundant(assists)
blocks <- remove_redundant(blocks)
digs <- remove_redundant(digs)
## Hit Pct. is (Kills - Errors) / Attacks
hitting <- hitting %>%
select(-Rank,-S,-`W-L`,-`Pct.`) %>%
mutate(Hit_pct = (Kills - Errors)/`Total Attacks`) %>%
arrange(Team)
kills <- remove_redundant(kills)
opponents <- opponents %>%
select(-Rank,-S,-`Opp Pct`) %>%
mutate(Opp_pct = (`Opp Kills` - `Opp Errors`)/`Opp Attacks`) %>%
arrange(Team)
wl <- wl %>%
select(-Rank,-`Pct.`) %>%
mutate(Win_pct = W/(W+L)) %>%
arrange(Team)
## join the data
vb <- wl %>%
left_join(aces) %>%
left_join(assists) %>%
left_join(blocks) %>%
left_join(digs) %>%
left_join(hitting) %>%
##  left_join(kills) %>% ## kills are also in hitting
left_join(opponents) %>%
rename(Sets = S)
## separate team from conference
## Tricky because conference follows team name in parentheses
##   but some team names include location in parentheses
## Catch the last set of () in each string
##   with spaces, dashes, letters, and numbers between
conference_pattern <- "\\([- a-zA-Z0-9]+\\)$"
#str_extract(vb$Team,conference_pattern)
vb <- vb %>%
mutate(Conference =
str_sub(str_extract(Team,conference_pattern),2,-2)) %>%
mutate(Team =
str_remove(Team,conference_pattern)) %>%
select(Team,Conference,everything())
rm(conference_pattern)
write_csv(vb,"../../data/volleyball-team-2019.csv")
big10 <- vb %>%
filter(Conference == "Big Ten")
big10 <- vb %>%
filter(Conference == "Big Ten")
big10
ggplot(big10, aes(x=Kills/Sets,y=Win_pct)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
geom_smooth(se=FALSE,color="red") +
ggplot(big10, aes(x=Kills/Sets,y=Win_pct)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
geom_smooth(se=FALSE,color="red")
ggplot(big10, aes(x=Kills/Sets,y=Win_pct)) +
geom_point() +
geom_smooth(method="lm", se=FALSE)
ggplot(big10, aes(x=Kills/Sets,y=Win_pct)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
geom_smooth(se=FALSE,color="red")
ggplot(big10, aes(x=Kills/Sets,y=Win_pct)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
geom_smooth(se=FALSE,color="red") +
xlab("Kills per Set") +
ylab("Winning Percentage") +
ggtitle("2019 Big Ten Women's Volleyball")
x <- big10$Kills/big10$Sets
y <- big10$Win_pct
mx <- mean(x)
my <- mean(y)
sx <- sd(x)
sy <- sd(y)
r <- cor(x,y)
slope <- r *sy/sx
intercept <- my - slope*mx
slope
intercept
fit <- lm(y ~ x)
coef(fit)
vb <- read_csv("../../data/volleyball-team-2019.csv")
vb <- read_csv("../../data/volleyball-team-2019.csv")
vb
vb %>%
select(Team, Conference, W, L, Win_pct) %>%
mutate(w2 = W/(W+L))
vb %>%
group_by(Conference) %>%
summarize(n=n(),
mean_win_pct = mean(Win_pct),
mean_win_pct_2 = sum(W)/(sum(W)+sum(L))) %>%
arrange(desc(mean_win_pct)) %>%
print(n=50)
vb <- vb %>%
mutate(kills_per_set = Kills/Sets)
ggplot(vb, aes(x=kills_per_set,y=Win_pct)) +
geom_point() +
geom_smooth(se=FALSE,method="lm") +
facet_wrap(~Conference)
ggplot(vb, aes(x=kills_per_set,y=Win_pct,color=Conference)) +
##  geom_point() +
##  geom_smooth(se=FALSE,method="lm")
geom_point(show.legend=FALSE) +
geom_smooth(se=FALSE,method="lm",show.legend=FALSE)
get_slope <- function(x,y)
{
fit <- lm(y ~ x)
return ( coef(fit)[2] )
}
kills_summary <- vb %>%
group_by(Conference) %>%
summarize(r = cor(kills_per_set,Win_pct),
b = get_slope(kills_per_set,Win_pct))
kills_summary
ggplot(kills_summary, aes(x=r)) +
geom_density()
ggplot(kills_summary, aes(x=b)) +
geom_density()
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
library(kableExtra)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
vb_team <- read_csv("../../data/volleyball-team-2019.csv")
vb_match <- read_csv("../../data/vb-division1-2019-all-matches.csv") %>%
mutate(index = row_number()) %>%
select(index,everything())
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
# Let's look at one team
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://samfordsports.com/sports/womens-volleyball/schedule/2019
## Samford played after 11/16/19 which were not included in vb_match
# Let's look at one team
team_name <- "Akron"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://gozips.com/sports/womens-volleyball/schedule/2019
## Akron had one match after 11/16/19
## Can find all teams where there is a mismatch
team_names <- vb_team %>% pull(Team)
n_match <- c()
for(i in 1:length(team_names)){
team <- team_names[i]
n_match[i] <- vb_match %>%
filter(team1==team_name | team2==team_name) %>%
nrow()
}
vb_team <- vb_team %>%
mutate(
n_matches1 = n_match,
n_matches2 = W+L
)
vb_team %>%
filter(n_matches1 != n_matches2)
vb_team %>%
summarize(total1 = sum(n_matches1),
total2 = sum(n_matches2))
vb_team
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
# Let's look at one team
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://samfordsports.com/sports/womens-volleyball/schedule/2019
## Samford played after 11/16/19 which were not included in vb_match
# Let's look at one team
team_name <- "Akron"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://gozips.com/sports/womens-volleyball/schedule/2019
## Akron had one match after 11/16/19
## Can find all teams where there is a mismatch
team_names <- vb_team %>% pull(Team)
n_match <- c()
for(i in 1:length(team_names)){
team <- team_names[i]
n_match[i] <- vb_match %>%
filter(team1==team_name | team2==team_name) %>%
nrow()
}
vb_team <- vb_team %>%
mutate(
n_matches1 = n_match,
n_matches2 = W+L
)
vb_team %>%
filter(n_matches1 != n_matches2)
vb_team %>%
summarize(total1 = sum(n_matches1),
total2 = sum(n_matches2))
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
# Let's look at one team
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://samfordsports.com/sports/womens-volleyball/schedule/2019
## Samford played after 11/16/19 which were not included in vb_match
# Let's look at one team
team_name <- "Akron"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://gozips.com/sports/womens-volleyball/schedule/2019
## Akron had one match after 11/16/19
## Can find all teams where there is a mismatch
team_names <- vb_team %>% pull(Team)
team_names
n_match <- c()
for(i in 1:length(team_names)){
team <- team_names[i]
n_match[i] <- vb_match %>%
filter(team1==team_name | team2==team_name) %>%
nrow()
}
n_match
vb_team <- vb_team %>%
mutate(
n_matches1 = n_match,
n_matches2 = W+L
)
vb_team %>%
filter(n_matches1 != n_matches2)
vb_team %>%
summarize(total1 = sum(n_matches1),
total2 = sum(n_matches2))
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
# Let's look at one team
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://samfordsports.com/sports/womens-volleyball/schedule/2019
## Samford played after 11/16/19 which were not included in vb_match
# Let's look at one team
team_name <- "Akron"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://gozips.com/sports/womens-volleyball/schedule/2019
## Akron had one match after 11/16/19
## Can find all teams where there is a mismatch
team_names <- vb_team %>% pull(Team)
team_names
n_match <- c()
for(i in 1:length(team_names)){
team <- team_names[i]
n_match[i] <- vb_match %>%
filter(team1==team_name | team2==team_name) %>%
nrow()
}
n_match
vb_team <- vb_team %>%
mutate(
n_matches1 = n_match,
n_matches2 = W+L
)
vb_team %>%
filter(n_matches1 != n_matches2)
vb_team %>%
summarize(total1 = sum(n_matches1),
total2 = sum(n_matches2))
team_names
n_match
vb_team %>%
summarize(wins = sum(W),
losses = sum(L))
nrow(vb_match)
# Let's look at one team
team_name <- "Samford"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://samfordsports.com/sports/womens-volleyball/schedule/2019
## Samford played after 11/16/19 which were not included in vb_match
# Let's look at one team
team_name <- "Akron"
vb_match %>%
filter(team1==team_name | team2==team_name)
vb_team %>%
filter(Team == team_name)
## https://gozips.com/sports/womens-volleyball/schedule/2019
## Akron had one match after 11/16/19
## Can find all teams where there is a mismatch
team_names <- vb_team %>% pull(Team)
n_match <- c()
for(i in 1:length(team_names)){
team <- team_names[i]
n_match[i] <- vb_match %>%
filter(team1==team_name | team2==team_name) %>%
nrow()
}
vb_team <- vb_team %>%
mutate(
n_matches1 = n_match,
n_matches2 = W+L
)
vb_team %>%
filter(n_matches1 != n_matches2)
vb_team %>%
summarize(total1 = sum(n_matches1),
total2 = sum(n_matches2))
vb_match %>%
filter(is.na(winner) | is.na(loser))
## Check that final scores of 15 won by at least 2 points in set 5
vb_match %>%
filter(!is.na(s1_5) & !is.na(s2_5)) %>%
filter( (s1_5 == 15 & s2_5 <= 15 & s1_5-s2_5 <2) | (s2_5 == 15 & s1_5 <= 15 & s2_5-s1_5<2))
## Check that final scores of 15 won by at least 2 points in set 5
vb_match %>%
filter(!is.na(s1_5) & !is.na(s2_5)) %>%
filter( (s1_5 == 15 & s2_5 <= 15 & s1_5-s2_5 <2) | (s2_5 == 15 & s1_5 <= 15 & s2_5-s1_5<2))
## Check that final scores of > 15 won by 2 points in set 5
vb_match %>%
filter(!is.na(s1_5) & !is.na(s2_5)) %>%
filter( (s1_5 > 15 | s2_5 > 15) & (abs(s1_5-s2_5) != 2)) %>%
select(index, s1_5, s2_5)
knitr::opts_chunk$set(echo = TRUE)
