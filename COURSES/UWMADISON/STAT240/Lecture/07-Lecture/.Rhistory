# make sure a and b are in range
if(a < 0) a = 0
if(b > n) b = n
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dbinom(x,n,p)
# Choose a title for the plot if one is not passed
if(is.null(main)){
main <- paste("Binomial(",n,",",p,")")
}
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
# return the graph object, but do so invisibly so no output is shown on the screen
# return(invisible(graph))
}
## old code to visualize the binomial distribution
gpois <- function(lambda,scale=FALSE,
a=NULL,
b=NULL,
main=NULL,...) {
if ( is.null(a) ){a <- qpois(0.0001,lambda)}
if ( is.null(b) ){b <- qpois(0.9999,lambda)}
# make sure lambda is an integer
lambda <- round(lambda)
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dpois(x,lambda)
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
if ( is.null(main) )graph <- graph + ggtitle(paste("Poisson(",lambda,")"))
return (graph)
}
geom_norm_density <- function(mu=0,sigma=1,a=NULL,b=NULL,color="blue",...)
{
if ( is.null(a) ){a <- qnorm(0.0001,mu,sigma)}
if ( is.null(b) ){b <- qnorm(0.9999,mu,sigma)}
x <- seq(a,b,length.out=1001)
df <- data.frame(x=x, y=dnorm(x,mu,sigma))
geom_line(data=df,aes(x=x,y=y),color=color,...)
}
geom_norm_fill = function(mu=0,sigma=1,a=NULL,b=NULL, fill="firebrick4",...)
{
if ( is.null(a) ){a <- qnorm(0.0001,mu,sigma)}
if ( is.null(b) ){b <- qnorm(0.9999,mu,sigma)}
x <- seq(a,b,length.out=1001)
df <- data.frame(
x=x,
ymin=rep(0,length(x)),
ymax = dnorm(x,mu,sigma)
)
geom_ribbon(data=df,aes(x=x,ymin=ymin,ymax=ymax),fill=fill,...)
}
gnorm <- function(mu=0,sigma=1,a=NULL,b=NULL,color="blue", fill=NULL,title=TRUE,...)
{
g <- ggplot()
if ( !is.null(fill) ) g <- g + geom_norm_fill(mu,sigma,a,b,fill)
g <- g +
geom_norm_density(mu,sigma,a,b,color,...) +
geom_hline(yintercept=0) +
ylab('density')
if ( title )
g <- g +
ggtitle(paste("N(",mu,",",sigma,")"))
return ( g )
}
gnorm(mu=0,sigma=1)
a <- 2
b <- 5
ggplot(tibble(x=c(a,b), y=1/(b-a)), aes(x,y)) +
geom_line(size=1) +
geom_segment(aes(xend=x, yend=rep(0,2)), size=1) +
geom_segment(aes(x=a-1, y=0, xend=a, yend=0)) +
geom_segment(aes(x=b+1, y=0, xend=b, yend=0)) +
ylim(c(0, 1/(b-a))) +
xlim(c(a-1, b+1)) +
scale_x_continuous(breaks = seq(a-1,b+1)) +
xlab("X") +
ylab("density")+
ggtitle(paste0("Uniform(",a, ", ", b, ")"))
## Binomial distributions
gbinom(n=5,p=.8)
gpois(5,color="red") +
geom_hline(yintercept=0)
n_options <- 2^seq(0, 12, by=2) # sample sizes to consider
p_options <- c(.5, .1)  # probabilities to consider
for(p in p_options){
par(mfrow = c(2,4))
for(n in n_options){
print(gbinom(n,p,color=ifelse(p==.5,"red","blue")) )
}
print(gbinom(n,p,color=ifelse(p==.5,"red","blue"),scale=TRUE) )
}
n <- 5
p <- .5
k <- 2
choose(n, k)
factorial(n)/(factorial(k)*factorial(n-k)) # n! /(k!(n-k)!)
choose(n, k)*p^k*(1-p)^(n-k)
dbinom(k,n,p) # see below
# Simulate binomial random variables
n <- 5
p <- .5
(x <- rbinom(6, n, p))
mean(x)
n*p
var(x)
n*p*(1-p) # True Variance.
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
## Binomial "density" plot
gbinom(n,p)
## Binomial distribution calculations
## P(X <= x) = F(x), where F is the distribution function.
# P(X <= 3):
pbinom(3, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p) + dbinom(3, n, p)
1 - dbinom(4, n, p) - dbinom(5, n, p)
# P(X > 3):
1 - pbinom(3, n, p)
pbinom(3, n, p, lower.tail=FALSE) # strictly greater than the value.
dbinom(4, n, p) + dbinom(5, n, p)
# P(X < 3):
pbinom(3, n, p) - dbinom(3, n, p)
pbinom(2, n, p) # P(X <= 2)
## Binomial quantile calculations
## Docs:  The quantile is defined as the smallest value x such that F(x) â‰¥ p, where F is the distribution function.
qbinom(.2, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p)
mu <- 3
sigma <- .5
mu2 <- 7
sigma2 <- 2
gnorm(mu=mu,sigma=sigma,a=-10,b=20,color="blue", fill=NULL,title=TRUE) +
stat_function(fun = dnorm, n = 200, args = list(mean = mu2, sd = sigma2), color="magenta")
mu <- 2
sigma <- 1
a <- 0
b <- 4
(prob <- pnorm(b, mean=mu, sd=sigma, lower.tail=TRUE) - pnorm(a, mean=mu, sd=sigma, lower.tail=TRUE))
ggplot(data.frame(x = c(mu-4*sigma, mu+4*sigma)), aes(x)) +
stat_function(fun = dnorm, args = list(mean=mu, sd=sigma)) +
stat_function(fun = dnorm, args = list(mean=mu, sd=sigma),
xlim = c(a,b),
geom = "area",
fill="magenta") +
geom_vline(xintercept=c(a,b), linetype="dashed",color="red") +
ggtitle(str_c("P(",a," < X < ", b, ") = ", round(prob,3)),
subtitle =str_c("X ~ N(", mu, ", ", sigma, ")"))
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
n <- 5
p <- .5
(x <- rbinom(6, n, p))
(x <- rbinom(6, n, p)
(x <- rbinom(6, n, p))
x
# Simulate binomial random variables
n <- 5
p <- .5
(x <- rbinom(6, n, p))
mean(x)
n*p
var(x)
n*p*(1-p) # True Variance.
# Simulate binomial random variables
n <- 5
p <- .5
(x <- rbinom(6, n, p))
mean(x)
n*p
var(x)
n*p*(1-p) # True Variance.
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
dbinom(6, n, p)
## Binomial "density" plot
gbinom(n,p)
## Binomial "density" plot
gbinom(n,p)
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
## old code to visualize the binomial distribution
gbinom <- function(n,p,scale=FALSE,
a=ifelse(scale,floor(n*p-4*sqrt(n*p*(1-p))),0),
b=ifelse(scale,ceiling(n*p+4*sqrt(n*p*(1-p))),n),
main=NULL,...) {
# make sure a and b are integers
a <- round(a)
b <- round(b)
# make sure a < b
if(a > b) {
temp = a
a = b
b = temp
}
# make sure a and b are in range
if(a < 0) a = 0
if(b > n) b = n
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dbinom(x,n,p)
# Choose a title for the plot if one is not passed
if(is.null(main)){
main <- paste("Binomial(",n,",",p,")")
}
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
# return the graph object, but do so invisibly so no output is shown on the screen
# return(invisible(graph))
}
## old code to visualize the binomial distribution
gpois <- function(lambda,scale=FALSE,
a=NULL,
b=NULL,
main=NULL,...) {
if ( is.null(a) ){a <- qpois(0.0001,lambda)}
if ( is.null(b) ){b <- qpois(0.9999,lambda)}
# make sure lambda is an integer
lambda <- round(lambda)
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dpois(x,lambda)
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
if ( is.null(main) )graph <- graph + ggtitle(paste("Poisson(",lambda,")"))
return (graph)
}
geom_norm_density <- function(mu=0,sigma=1,a=NULL,b=NULL,color="blue",...)
{
if ( is.null(a) ){a <- qnorm(0.0001,mu,sigma)}
if ( is.null(b) ){b <- qnorm(0.9999,mu,sigma)}
x <- seq(a,b,length.out=1001)
df <- data.frame(x=x, y=dnorm(x,mu,sigma))
geom_line(data=df,aes(x=x,y=y),color=color,...)
}
geom_norm_fill = function(mu=0,sigma=1,a=NULL,b=NULL, fill="firebrick4",...)
{
if ( is.null(a) ){a <- qnorm(0.0001,mu,sigma)}
if ( is.null(b) ){b <- qnorm(0.9999,mu,sigma)}
x <- seq(a,b,length.out=1001)
df <- data.frame(
x=x,
ymin=rep(0,length(x)),
ymax = dnorm(x,mu,sigma)
)
geom_ribbon(data=df,aes(x=x,ymin=ymin,ymax=ymax),fill=fill,...)
}
gnorm <- function(mu=0,sigma=1,a=NULL,b=NULL,color="blue", fill=NULL,title=TRUE,...)
{
g <- ggplot()
if ( !is.null(fill) ) g <- g + geom_norm_fill(mu,sigma,a,b,fill)
g <- g +
geom_norm_density(mu,sigma,a,b,color,...) +
geom_hline(yintercept=0) +
ylab('density')
if ( title )
g <- g +
ggtitle(paste("N(",mu,",",sigma,")"))
return ( g )
}
gnorm(mu=0,sigma=1)
a <- 2
b <- 5
ggplot(tibble(x=c(a,b), y=1/(b-a)), aes(x,y)) +
geom_line(size=1) +
geom_segment(aes(xend=x, yend=rep(0,2)), size=1) +
geom_segment(aes(x=a-1, y=0, xend=a, yend=0)) +
geom_segment(aes(x=b+1, y=0, xend=b, yend=0)) +
ylim(c(0, 1/(b-a))) +
xlim(c(a-1, b+1)) +
scale_x_continuous(breaks = seq(a-1,b+1)) +
xlab("X") +
ylab("density")+
ggtitle(paste0("Uniform(",a, ", ", b, ")"))
## Binomial distributions
gbinom(n=5,p=.8)
gpois(5,color="red") +
geom_hline(yintercept=0)
n_options <- 2^seq(0, 12, by=2) # sample sizes to consider
p_options <- c(.5, .1)  # probabilities to consider
for(p in p_options){
par(mfrow = c(2,4))
for(n in n_options){
print(gbinom(n,p,color=ifelse(p==.5,"red","blue")) )
}
print(gbinom(n,p,color=ifelse(p==.5,"red","blue"),scale=TRUE) )
}
n <- 5
p <- .5
k <- 2
choose(n, k)
factorial(n)/(factorial(k)*factorial(n-k)) # n! /(k!(n-k)!)
choose(n, k)*p^k*(1-p)^(n-k)
dbinom(k,n,p) # see below
# Simulate binomial random variables
n <- 5
p <- .5
(x <- rbinom(6, n, p)) # Try n times / from 0 to 5 / probability = 0.5
mean(x)
n*p # mean = E(x)
var(x) # E((x-u)^2)
n*p*(1-p) # True Variance.
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
#dbinom(6, n, p) -> wrong
## Binomial "density" plot
gbinom(n,p)
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
#dbinom(6, n, p) -> wrong
pbinom(3, n, p)
pbinom(3, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p) + dbinom(3, n, p)
pbinom(3, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p) + dbinom(3, n, p)
1 - dbinom(4, n, p) - dbinom(5, n, p)
1 - pbinom(3, n, p)
pbinom(3, n, p, lower.tail=FALSE)
1 - pbinom(3, n, p)
pbinom(3, n, p, lower.tail=FALSE) # strictly greater than the value.
dbinom(4, n, p) + dbinom(5, n, p)
pbinom(3, n, p) - dbinom(3, n, p)
pbinom(2, n, p)
## Binomial distribution calculations
## P(X <= x) = F(x), where F is the distribution function.
# P(X <= 3):
pbinom(3, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p) + dbinom(3, n, p)
1 - dbinom(4, n, p) - dbinom(5, n, p)
# P(X > 3):
1 - pbinom(3, n, p)
pbinom(3, n, p, lower.tail=FALSE) # strictly greater than the value.
dbinom(4, n, p) + dbinom(5, n, p)
# P(X < 3):
pbinom(3, n, p) - dbinom(3, n, p)
pbinom(2, n, p) # P(X <= 2)
qbinom(.2, n, p)
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p)
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
dbinom(0, n, p) + dbinom(1, n, p) + dbinom(2, n, p) + dbinom(3, n, p) + dbinom(4, n, p) + dbinom(5, n, p)
#dbinom(6, n, p) -> wrong
## Binomial "density" calculations
dbinom(0:n, n, p) # gives heights of segments in below graph.
dbinom(0, n, p)
dbinom(1, n, p)
dbinom(2, n, p)
dbinom(3, n, p)
dbinom(4, n, p)
dbinom(5, n, p)
#dbinom(6, n, p) -> wrong
## This gives the 99th percentile of a N(202, 3) distribution
qnorm(0.01, mean=202, sd=3, lower.tail=TRUE)
pnorm(195.021, mean=202, sd=3)
rnorm(10, mean=202, sd=3)
hist(rnorm(10000, mean=202, sd=3))
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
n <- 7
p <- 0.8
1 - pbinom(6, n, p)
n <- 7
p <- 0.8
gbinom(n,p)
n <- 7
p <- 0.8
gbinom(n,p)
1 - pbinom(6, n, p)
rbinom(n=5, size=20, prob=0.4)
rbinom(5, 20, 0.4)
round(dbinom(0:20, 20, 0.4), 6)
round(dbinom(0:20, 20, 0.4), 6)
dbinom(0, 20, 0.4)
round(dbinom(0, 20, 0.4), 6)
dbinom(8, 20, 0.4)
pbinom(6, 20, 0.4)
dbinom(0:6, 20, 0.4)
sum(dbinom(0:6, 20, 0.4))
pbinom(6, 20, 0.4) # prob(X <= 6)
sum(dbinom(0:6, 20, 0.4))
# P(X <= 8) = 0.5956
# P(X <= 7) = 0.4159
qbinom(0.5, 20, 0.4)
qbinom(seq(0.1, 0.9, 0.1), 20, 0.4)
gbinom(90, 0.5)
gbinom <- function(n,p,scale=FALSE,
a=ifelse(scale,floor(n*p-4*sqrt(n*p*(1-p))),0),
b=ifelse(scale,ceiling(n*p+4*sqrt(n*p*(1-p))),n),
main=NULL,...) {
# make sure a and b are integers
a <- round(a)
b <- round(b)
# make sure a < b
if(a > b) {
temp = a
a = b
b = temp
}
# make sure a and b are in range
if(a < 0) a = 0
if(b > n) b = n
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dbinom(x,n,p)
# Choose a title for the plot if one is not passed
if(is.null(main)){
main <- paste("Binomial(",n,",",p,")")
}
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
# return the graph object, but do so invisibly so no output is shown on the screen
# return(invisible(graph))
}
gbinom(90, 0.5)
knitr::opts_chunk$set(echo=TRUE,message=FALSE,warning=FALSE,cache=TRUE,autodep=TRUE,cache.comments=FALSE)
library(tidyverse)
library(lubridate)
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
gbinom <- function(n,p,scale=FALSE,
a=ifelse(scale,floor(n*p-4*sqrt(n*p*(1-p))),0),
b=ifelse(scale,ceiling(n*p+4*sqrt(n*p*(1-p))),n),
main=NULL,...) {
# make sure a and b are integers
a <- round(a)
b <- round(b)
# make sure a < b
if(a > b) {
temp = a
a = b
b = temp
}
# make sure a and b are in range
if(a < 0) a = 0
if(b > n) b = n
# create the sequence of possible values to graph
x <- seq(a,b)
# compute the probabilities to graph
probability <- dbinom(x,n,p)
# Choose a title for the plot if one is not passed
if(is.null(main)){
main <- paste("Binomial(",n,",",p,")")
}
# save the graph as an object which can be returned
graph <- ggplot(data.frame(x,probability),aes(x=x,y=probability,xend=x,yend=0),...) +
geom_segment(...) +
xlab('x') +
ylab('Probability') +
geom_hline(yintercept=0) +
ggtitle(main)
graph
# return the graph object, but do so invisibly so no output is shown on the screen
# return(invisible(graph))
}
gbinom(90, 0.5)
gbinom(90, 0.5, a=60, b=65, color="firebrick")
gbinom(90, 0.5, scale=TRUE, color="gray")+
geom_binom_density(90, 0.5, a=50, sclae=TRUE, color="firebrick") +
ggtitle(paste0("P(X >= 50) = ", round(1-pbinom(49,90,0.5), 4)) + theme_bw()
gbinom(90, 0.5, scale = TRUE, color = "gray") +
geom_binom_density(90, 0.5, a = 50, scale = TRUE, color = "firebrick") +
ggtitle(paste0("P(X >= 50) = ", round(1 - pbinom(49,90,0.5),4))) +
theme_bw()
pnorm(20, 10, 10) - pnorm(0,10,10)
